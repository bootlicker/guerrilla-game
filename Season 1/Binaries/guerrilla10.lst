------- FILE coloured_guerrilla010.asm LEVEL 1 PASS 2
      1  10000 ????						;=================
      2  10000 ????						; Initialise DASM
      3  10000 ????						;=================
      4  10000 ????
      5  10000 ????				       PROCESSOR	6502
      6  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE coloured_guerrilla010.asm
      8  0000 ????
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	macro.h
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  0000 ????
      4  0000 ????	       00 69	   VERSION_MACRO =	105
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  0000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  0000 ????						;			    used for code assembly.
     24  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  0000 ????						;
     26  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  0000 ????						;
     28  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  0000 ????						;			   (standardised macro for vertical synch code)
     30  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     31  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  0000 ????						; 1.0	22/MAR/2003		Initial release
     33  0000 ????
     34  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     35  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     37  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  0000 ????						;   registers and require them to be defined first).
     39  0000 ????
     40  0000 ????						; Available macros...
     41  0000 ????						;   SLEEP n		 - sleep for n cycles
     42  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  0000 ????
     46  0000 ????						;-------------------------------------------------------------------------------
     47  0000 ????						; SLEEP duration
     48  0000 ????						; Original author: Thomas Jentzsch
     49  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  0000 ????						; useful for code where precise timing is required.
     51  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  0000 ????
     55  0000 ????				      MAC	sleep
     56  0000 ????			   .CYCLES    SET	{1}
     57  0000 ????
     58  0000 ????				      IF	.CYCLES < 2
     59  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  0000 ????				      ERR
     61  0000 ????				      ENDIF
     62  0000 ????
     63  0000 ????				      IF	.CYCLES & 1
     64  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     65  0000 ????				      nop	0
     66  0000 ????				      ELSE
     67  0000 ????				      bit	VSYNC
     68  0000 ????				      ENDIF
     69  0000 ????			   .CYCLES    SET	.CYCLES - 3
     70  0000 ????				      ENDIF
     71  0000 ????
     72  0000 ????				      REPEAT	.CYCLES / 2
     73  0000 ????				      nop
     74  0000 ????				      REPEND
     75  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     76  0000 ????
     77  0000 ????						;-------------------------------------------------------------------------------
     78  0000 ????						; VERTICAL_SYNC
     79  0000 ????						; Original author: Manuel Polik
     80  0000 ????						; Inserts the code required for a proper 3 scannline 
     81  0000 ????						; vertical sync sequence
     82  0000 ????						;
     83  0000 ????						; Note: Alters the accumulator
     84  0000 ????						;
     85  0000 ????						; IN:
     86  0000 ????						; OUT: A = 1
     87  0000 ????
     88  0000 ????				      MAC	vertical_sync
     89  0000 ????				      LDA	#$02	; A = VSYNC enable
     90  0000 ????				      STA	WSYNC	; Finish current line
     91  0000 ????				      STA	VSYNC	; Start vertical sync
     92  0000 ????				      STA	WSYNC	; 1st line vertical sync
     93  0000 ????				      STA	WSYNC	; 2nd line vertical sync
     94  0000 ????				      LSR		; A = VSYNC disable
     95  0000 ????				      STA	WSYNC	; 3rd line vertical sync
     96  0000 ????				      STA	VSYNC	; Stop vertical sync
     97  0000 ????				      ENDM
     98  0000 ????
     99  0000 ????						;-------------------------------------------------------------------------------
    100  0000 ????						; CLEAN_START
    101  0000 ????						; Original author: Andrew Davie
    102  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  0000 ????						; Use as very first section of code on boot (ie: at reset)
    106  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  0000 ????
    108  0000 ????				      MAC	clean_start
    109  0000 ????				      sei
    110  0000 ????				      cld
    111  0000 ????
    112  0000 ????				      ldx	#0
    113  0000 ????				      txa
    114  0000 ????				      tay
    115  0000 ????			   .CLEAR_STACK dex
    116  0000 ????				      txs
    117  0000 ????				      pha
    118  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  0000 ????
    120  0000 ????				      ENDM
    121  0000 ????
    122  0000 ????						;-------------------------------------------------------
    123  0000 ????						; SET_POINTER
    124  0000 ????						; Original author: Manuel Rotschkar
    125  0000 ????						;
    126  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  0000 ????						;
    128  0000 ????						; Usage: SET_POINTER pointer, address
    129  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  0000 ????						;
    131  0000 ????						; Note: Alters the accumulator, NZ flags
    132  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  0000 ????						; IN 2: absolute address
    134  0000 ????
    135  0000 ????				      MAC	set_pointer
    136  0000 ????			   .POINTER   SET	{1}
    137  0000 ????			   .ADDRESS   SET	{2}
    138  0000 ????
    139  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  0000 ????				      STA	.POINTER	; Store in pointer
    141  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    142  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    143  0000 ????
    144  0000 ????				      ENDM
    145  0000 ????
    146  0000 ????						; EOF
------- FILE coloured_guerrilla010.asm
     10  0000 ????
     11  0000 ????						;==================
     12  0000 ????						; Define Constants
     13  0000 ????						;==================
     14  0000 ????
     15  0000 ????	       00 c0	   PF_HEIGHT  =	192
     16  0000 ????
     17  0000 ????	       00 19	   P0_HEIGHT  =	25
     18  0000 ????
     19  0000 ????
     20  0000 ????						;==================
     21  0000 ????						; Define RAM Usage
     22  0000 ????						;==================
     23  0000 ????
     24 U0099 ????				      SEG.U	VARS
     25 U0099 ????
     26 U0080					      ORG	$80
     27 U0080
     28 U0080							; Object X positions in $80
     29 U0080		       00	   ObjectX    ds	1	; player0
     30 U0081
     31 U0081							; Object Y positions in $81
     32 U0081		       00	   ObjectY    ds	1	; player0
     33 U0082
     34 U0082							; DoDraw Graphic Pointers in $86-87
     35 U0082		       00 00	   Player0Ptr ds	2	; Used for drawing player0
     36 U0084		       00 00	   Player1Ptr ds	2
     37 U0086
     38 U0086							; Frame Counter
     39 U0086		       00	   Frame      ds	1	; Stored in $88
     40 U0087
     41 U0087							; Indexes for player animation sequences
     42 U0087		       00	   Animation0 ds	1	; Stored in $89
     43 U0088		       00	   Animation1 ds	1	; $8A
     44 U0089
     45 U0089							; Color Pointers
     46 U0089		       00 00	   Player0Clr ds	2	; player0, stored in $8B-8C
     47 U008b		       00 00	   Player1Clr ds	2	; $8D-8E
     48 U008d
     49 U008d							; Scratch Variable
     50 U008d		       00	   Temp       ds	1	; $8F
     51 U008e		       00	   Temp2      ds	1
     52 U008f
     53 U008f							; Playfield Scanline Height and Colour
     54 U008f
     55 U008f		       00	   PFIndex    ds	1	; $90
     56 U0090		       00 00	   PFColourPtr ds	2	; $91-92
     57 U0092
     58 U0092							; Player Y Offsets
     59 U0092
     60 U0092		       00	   Player0Offset ds	1	; $93
     61 U0093
     62 U0093							; X and Y variables for returning Player0 to collision position
     63 U0093
     64 U0093		       00	   SavedX     ds	1	; $94
     65 U0094		       00	   SavedY     ds	1	; $95
     66 U0095
     67 U0095		       00	   AnimFrameCounter ds	1
     68 U0096
     69 U0096		       00	   AnimateHor0 ds	1
     70 U0097		       00	   AnimateUp0 ds	1
     71 U0098		       00	   AnimateDown0 ds	1
     72 U0099
     73 U0099							;===========================
     74 U0099							; Define Start of Cartridge
     75 U0099							;===========================
     76 U0099
     77 U0099							; Define a segment for code
     78  10000 ????				       SEG	CODE
     79  10000 ????
     80  10000 ????						; 4K ROM starts at $F000
     81  f000					      ORG	$F000
     82  f000
     83  f000							;========================================
     84  f000							; PosObject
     85  f000							; ---------
     86  f000							;
     87  f000							; A - Holds the X position of the object
     88  f000							; X - holds the object to position
     89  f000							;     0 = player0
     90  f000							;
     91  f000							; player 0 -> Range is 0-159
     92  f000							;========================================
     93  f000
     94  f000				   PosObject
     95  f000		       38		      sec
     96  f001		       85 02		      sta	WSYNC
     97  f003				   DivideLoop
     98  f003		       e9 0f		      sbc	#15	; 2  2
     99  f005		       b0 fc		      bcs	DivideLoop	; 2  4
    100  f007		       49 07		      eor	#7	; 2  6
    101  f009		       0a		      asl		; 2  8
    102  f00a		       0a		      asl		; 2 10
    103  f00b		       0a		      asl		; 2 12
    104  f00c		       0a		      asl		; 2 14
    105  f00d		       9d 20 00 	      sta.wx	HMP0,X	; 5 19 - store fine tuning of X
    106  f010		       95 10		      sta	RESP0,X	; 4 23 - set coarse X position of object
    107  f012		       60		      rts		; 6 29
    108  f013
    109  f013							;==================
    110  f013							; Initialise Atari
    111  f013							;==================
    112  f013				   InitSystem
    113  f013
      0  f013					      CLEAN_START
      1  f013		       78		      sei
      2  f014		       d8		      cld
      3  f015
      4  f015		       a2 00		      ldx	#0
      5  f017		       8a		      txa
      6  f018		       a8		      tay
      7  f019		       ca	   .CLEAR_STACK dex
      8  f01a		       9a		      txs
      9  f01b		       48		      pha
     10  f01c		       d0 fb		      bne	.CLEAR_STACK
     11  f01e
    115  f01e
    116  f01e							; From here we fall into the main loop
    117  f01e
    118  f01e							;===================
    119  f01e							; Main Program Loop
    120  f01e							;===================
    121  f01e
    122  f01e				   Main
    123  f01e
    124  f01e		       20 2d f0 	      jsr	VerticalSync
    125  f021		       20 4d f0 	      jsr	VerticalBlank
    126  f024		       20 7b f1 	      jsr	Kernel
    127  f027		       20 bd f1 	      jsr	OverScan
    128  f02a		       4c 1e f0 	      jmp	Main
    129  f02d
    130  f02d				   ===============
    131  f02d							; Vertical Sync
    132  f02d							;===============
    133  f02d				   VerticalSync
    134  f02d		       a9 02		      lda	#2
    135  f02f		       a2 2f		      ldx	#47
    136  f031		       85 02		      sta	WSYNC
    137  f033		       85 00		      sta	VSYNC
    138  f035		       8e 96 02 	      stx	TIM64T
    139  f038
    140  f038		       85 02		      sta	WSYNC
    141  f03a		       85 02		      sta	WSYNC
    142  f03c		       a9 00		      lda	#0
    143  f03e		       85 0d		      sta	PF0
    144  f040		       85 0e		      sta	PF1
    145  f042		       85 0f		      sta	PF2
    146  f044		       85 1b		      sta	GRP0
    147  f046		       85 1c		      sta	GRP1
    148  f048		       85 02		      sta	WSYNC
    149  f04a		       85 00		      sta	VSYNC
    150  f04c
    151  f04c				   Sleep12		; JSR here to sleep for 12 cycles
    152  f04c		       60		      rts
    153  f04d
    154  f04d							;================
    155  f04d							; Vertical Blank
    156  f04d							; --------------
    157  f04d							; Game Logic
    158  f04d							;================
    159  f04d
    160  f04d				   VerticalBlank
    161  f04d
    162  f04d		       20 54 f0 	      jsr	ProcessJoystick
    163  f050		       20 a0 f0 	      jsr	PositionObjects
    164  f053
    165  f053		       60		      rts
    166  f054
    167  f054							;=================================
    168  f054							; Process Joystick
    169  f054							;
    170  f054							;   76543210
    171  f054							;   RLDUrldu	 - RIGHT LEFT DOWN UP right left down up
    172  f054							;
    173  f054							; UPPERCASE denotes the left joystick directions
    174  f054							; lowercase denotes the right joystick directions
    175  f054							;=================================
    176  f054
    177  f054				   ProcessJoystick
    178  f054		       ad 80 02 	      lda	SWCHA
    179  f057
    180  f057							; Store Player0 position to "bounce back"
    181  f057							; after a collision with something.
    182  f057
    183  f057		       a4 80		      ldy	ObjectX
    184  f059		       84 93		      sty	SavedX
    185  f05b		       a4 81		      ldy	ObjectY
    186  f05d		       84 94		      sty	SavedY
    187  f05f
    188  f05f							;=================================
    189  f05f							; Is Joystick held right?
    190  f05f							;=================================
    191  f05f
    192  f05f		       0a		      asl		; Put R in the carry bit
    193  f060		       b0 0f		      bcs	CheckLeft	; If R wasn't 1, then check for L
    194  f062
    195  f062		       a4 80		      ldy	ObjectX
    196  f064		       c8		      iny		; Move ObjectX right
    197  f065
    198  f065		       c0 a0		      cpy	#160	; Test for edge of screen
    199  f067		       d0 02		      bne	SaveX	; If not at edge of screen, save X position
    200  f069
    201  f069		       a0 00		      ldy	#0	; Else, wrap to the left edge.
    202  f06b
    203  f06b				   SaveX
    204  f06b
    205  f06b		       84 80		      sty	ObjectX	; Save X position
    206  f06d		       a0 00		      ldy	#0
    207  f06f		       84 0b		      sty	REFP0	; Graphics are stored facing right.
    208  f071							; So, turn off reflect player to make it face
    209  f071							; right, because we are moving right.
    210  f071
    211  f071							;=================================
    212  f071							; Is Joystick held left?
    213  f071							;=================================
    214  f071
    215  f071				   CheckLeft
    216  f071		       0a		      asl		; Shift A one bit left. Now L is in the carry bit.
    217  f072		       b0 0f		      bcs	CheckDown	; Branch if joystick not held left.
    218  f074
    219  f074		       a4 80		      ldy	ObjectX	; Get X position
    220  f076		       88		      dey		; Move it left
    221  f077
    222  f077		       c0 ff		      cpy	#255	; Test for edge of screen
    223  f079		       d0 02		      bne	SaveX2	; Save X if not at edge of screen
    224  f07b
    225  f07b		       a0 9f		      ldy	#159	; Else wrap to right edge
    226  f07d
    227  f07d				   SaveX2
    228  f07d
    229  f07d		       84 80		      sty	ObjectX
    230  f07f		       a0 08		      ldy	#8
    231  f081		       84 0b		      sty	REFP0	; We are moving left, so flip graphics
    232  f083							; to make face left.
    233  f083
    234  f083							;=================================
    235  f083							; Is Joystick held down?
    236  f083							;=================================
    237  f083
    238  f083				   CheckDown
    239  f083
    240  f083		       0a		      asl		; Shift A one bit left. D is in carry.
    241  f084		       b0 0b		      bcs	CheckUp	; Branch if joystick not held down.
    242  f086		       a4 81		      ldy	ObjectY	; Get object's Y position
    243  f088		       c8		      iny		; Move it down
    244  f089		       c0 c0		      cpy	#PF_HEIGHT	; Test for bottom of screen
    245  f08b		       d0 02		      bne	SaveY	; Save Y if we're not at botom
    246  f08d		       a0 19		      ldy	#P0_HEIGHT	; Else wrap to top (is this right?)
    247  f08f
    248  f08f				   SaveY
    249  f08f
    250  f08f		       84 81		      sty	ObjectY	; Save Y.
    251  f091
    252  f091							;=================================
    253  f091							; Is Joystick held up?
    254  f091							;=================================
    255  f091
    256  f091				   CheckUp
    257  f091
    258  f091		       0a		      asl		; Shift A one bt left. U is in now in carry.
    259  f092		       b0 0b		      bcs	OnePlayer	; Branch if joystick not up. Only one player for now.
    260  f094		       a4 81		      ldy	ObjectY	; Get Y position
    261  f096		       88		      dey		; Move it up.
    262  f097		       c0 19		      cpy	#P0_HEIGHT	; Test for top of screen (is this right?)
    263  f099		       d0 02		      bne	SaveY2	; Save Y if we're not at top
    264  f09b		       a0 c0		      ldy	#PF_HEIGHT	; Else wrap to bottom.
    265  f09d
    266  f09d				   SaveY2
    267  f09d
    268  f09d		       84 81		      sty	ObjectY	; Save Y.
    269  f09f
    270  f09f				   OnePlayer
    271  f09f
    272  f09f							; We're done
    273  f09f
    274  f09f		       60		      rts
    275  f0a0
    276  f0a0							;=================================
    277  f0a0							; Position Objects
    278  f0a0							;
    279  f0a0							; This is an early version of the entire game,
    280  f0a0							; so we're only positioning GRP0.
    281  f0a0							;
    282  f0a0							;=================================
    283  f0a0
    284  f0a0				   PositionObjects
    285  f0a0
    286  f0a0		       a2 00		      ldx	#0	; We're only gonna position GRP0
    287  f0a2
    288  f0a2				   .p0loop
    289  f0a2
    290  f0a2		       a5 80		      lda	ObjectX
    291  f0a4		       20 00 f0 	      jsr	PosObject
    292  f0a7
    293  f0a7		       85 02		      sta	WSYNC
    294  f0a9		       85 2a		      sta	HMOVE
    295  f0ab
    296  f0ab							; We're gonna leave the p0loop label there for when we need
    297  f0ab							; to position everything.
    298  f0ab
    299  f0ab							; Prep player's Y position
    300  f0ab
    301  f0ab		       a5 81		      lda	ObjectY
    302  f0ad		       85 92		      sta	Player0Offset
    303  f0af		       85 8e		      sta	Temp2
    304  f0b1
    305  f0b1							; Animation Now
    306  f0b1
    307  f0b1		       a5 80		      lda	ObjectX
    308  f0b3		       c5 93		      cmp	SavedX
    309  f0b5		       f0 09		      beq	YMovement
    310  f0b7		       20 e3 f0 	      jsr	AnimationDelay
    311  f0ba		       c9 01		      cmp	#1
    312  f0bc		       f0 3d		      beq	AnimateHorizontalYes
    313  f0be		       d0 3d		      bne	AnimateHorizontalNo
    314  f0c0
    315  f0c0				   YMovement
    316  f0c0		       a5 81		      lda	ObjectY
    317  f0c2		       c5 94		      cmp	SavedY
    318  f0c4		       f0 16		      beq	StopAnimation
    319  f0c6		       90 02		      bcc	AnimationDelayUp
    320  f0c8		       b0 09		      bcs	AnimationDelayDown
    321  f0ca
    322  f0ca				   AnimationDelayUp
    323  f0ca		       20 e3 f0 	      jsr	AnimationDelay
    324  f0cd		       c9 01		      cmp	#1
    325  f0cf		       f0 3f		      beq	AnimateUpYes
    326  f0d1		       d0 3f		      bne	AnimateUpNo
    327  f0d3
    328  f0d3				   AnimationDelayDown
    329  f0d3		       20 e3 f0 	      jsr	AnimationDelay
    330  f0d6		       c9 01		      cmp	#1
    331  f0d8		       f0 46		      beq	AnimateDownYes
    332  f0da		       d0 46		      bne	AnimateDownNo
    333  f0dc
    334  f0dc				   StopAnimation
    335  f0dc		       a9 03		      lda	#3
    336  f0de		       85 87		      sta	Animation0
    337  f0e0		       4c 2d f1 	      jmp	SaveFrame
    338  f0e3
    339  f0e3							;=================================
    340  f0e3							; Animation Delay Counter
    341  f0e3							;
    342  f0e3							; We want one frame of animation
    343  f0e3							; every 10 screen frames
    344  f0e3							;=================================
    345  f0e3
    346  f0e3				   AnimationDelay
    347  f0e3		       e6 95		      inc	AnimFrameCounter
    348  f0e5		       a5 95		      lda	AnimFrameCounter
    349  f0e7		       c9 09		      cmp	#9
    350  f0e9		       f0 07		      beq	.IncFrameYes
    351  f0eb		       90 02		      bcc	.IncFrameNo
    352  f0ed		       b0 06		      bcs	.ResFrmCntr
    353  f0ef
    354  f0ef				   .IncFrameNo
    355  f0ef		       a9 00		      lda	#0
    356  f0f1		       60		      rts
    357  f0f2
    358  f0f2				   .IncFrameYes
    359  f0f2		       a9 01		      lda	#1
    360  f0f4		       60		      rts
    361  f0f5
    362  f0f5				   .ResFrmCntr
    363  f0f5		       18		      clc
    364  f0f6		       a9 00		      lda	#0
    365  f0f8		       85 95		      sta	AnimFrameCounter
    366  f0fa		       60		      rts
    367  f0fb
    368  f0fb
    369  f0fb				   AnimateHorizontalYes
    370  f0fb		       e6 96		      inc	AnimateHor0
    371  f0fd
    372  f0fd				   AnimateHorizontalNo
    373  f0fd		       a5 96		      lda	AnimateHor0
    374  f0ff		       c9 02		      cmp	#2
    375  f101		       f0 06		      beq	.CntHorCntr
    376  f103		       90 04		      bcc	.CntHorCntr
    377  f105		       b0 00		      bcs	.ResHorCntr
    378  f107				   .ResHorCntr
    379  f107		       a9 00		      lda	#0
    380  f109				   .CntHorCntr
    381  f109		       85 96		      sta	AnimateHor0
    382  f10b		       85 87		      sta	Animation0
    383  f10d		       4c 2d f1 	      jmp	SaveFrame
    384  f110
    385  f110				   AnimateUpYes
    386  f110		       e6 97		      inc	AnimateUp0
    387  f112
    388  f112				   AnimateUpNo
    389  f112		       a5 97		      lda	AnimateUp0
    390  f114		       29 03		      and	#3
    391  f116		       85 97		      sta	AnimateUp0
    392  f118		       18		      clc
    393  f119		       69 07		      adc	#7
    394  f11b		       85 87		      sta	Animation0
    395  f11d		       4c 2d f1 	      jmp	SaveFrame
    396  f120
    397  f120				   AnimateDownYes
    398  f120		       e6 98		      inc	AnimateDown0
    399  f122
    400  f122				   AnimateDownNo
    401  f122		       a5 98		      lda	AnimateDown0
    402  f124		       29 03		      and	#3
    403  f126		       85 98		      sta	AnimateDown0
    404  f128		       18		      clc
    405  f129		       69 03		      adc	#3
    406  f12b		       85 87		      sta	Animation0
    407  f12d
    408  f12d				   SaveFrame
    409  f12d		       a5 87		      lda	Animation0
    410  f12f
    411  f12f		       aa		      tax
    412  f130		       bd 4f f1 	      lda	ShapePtrLow,x
    413  f133		       18		      clc
    414  f134		       65 8e		      adc	Temp2	; Here we add the Y position
    415  f136		       85 82		      sta	Player0Ptr
    416  f138		       bd 5a f1 	      lda	ShapePtrHi,x
    417  f13b		       69 00		      adc	#0
    418  f13d		       85 83		      sta	Player0Ptr+1
    419  f13f
    420  f13f		       bd 65 f1 	      lda	ColourPtrLow,x
    421  f142		       18		      clc
    422  f143		       65 8e		      adc	Temp2
    423  f145		       85 89		      sta	Player0Clr
    424  f147		       bd 70 f1 	      lda	ColourPtrHi,x
    425  f14a		       69 00		      adc	#0
    426  f14c		       85 8a		      sta	Player0Clr+1
    427  f14e
    428  f14e		       60		      rts
    429  f14f
    430  f14f				   ShapePtrLow
    431  f14f		       0e		      .byte.b	<(CheHorizontal0 - PF_HEIGHT - 1 - 1)	; 0
    432  f150		       27		      .byte.b	<(CheHorizontal1 - PF_HEIGHT - 1 - 1)	; 1
    433  f151		       40		      .byte.b	<(CheHorizontal2 - PF_HEIGHT - 1 - 1)	; 2
    434  f152		       a4		      .byte.b	<(CheFrontLeftStand - PF_HEIGHT - 1 - 1)	; 3
    435  f153		       bd		      .byte.b	<(CheFrontRightStep - PF_HEIGHT - 1 - 1)	; 4
    436  f154		       d6		      .byte.b	<(CheFrontRightStand - PF_HEIGHT - 1 - 1)	; 5
    437  f155		       ef		      .byte.b	<(CheFrontLeftStep - PF_HEIGHT - 1 - 1)	; 6
    438  f156		       08		      .byte.b	<(CheBackLeftStand - PF_HEIGHT - 1 - 1)	; 7
    439  f157		       21		      .byte.b	<(CheBackRightStep - PF_HEIGHT - 1 - 1)	; 8
    440  f158		       3a		      .byte.b	<(CheBackRightStand - PF_HEIGHT - 1 - 1)	; 9
    441  f159		       53		      .byte.b	<(CheBackLeftStep - PF_HEIGHT - 1 - 1)	; 10
    442  f15a
    443  f15a
    444  f15a				   ShapePtrHi
    445  f15a		       f1		      .byte.b	>(CheHorizontal0 - PF_HEIGHT - 1 - 1)	; 0
    446  f15b		       f1		      .byte.b	>(CheHorizontal1 - PF_HEIGHT - 1 - 1)	; 1
    447  f15c		       f1		      .byte.b	>(CheHorizontal2 - PF_HEIGHT - 1 - 1)	; 2
    448  f15d		       f1		      .byte.b	>(CheFrontLeftStand - PF_HEIGHT - 1 - 1)	; 3
    449  f15e		       f1		      .byte.b	>(CheFrontRightStep - PF_HEIGHT - 1 - 1)	; 4
    450  f15f		       f1		      .byte.b	>(CheFrontRightStand - PF_HEIGHT - 1 - 1)	; 5
    451  f160		       f1		      .byte.b	>(CheFrontLeftStep - PF_HEIGHT - 1 - 1)	; 6
    452  f161		       f2		      .byte.b	>(CheBackLeftStand - PF_HEIGHT - 1 - 1)	; 7
    453  f162		       f2		      .byte.b	>(CheBackRightStep - PF_HEIGHT - 1 - 1)	; 8
    454  f163		       f2		      .byte.b	>(CheBackRightStand - PF_HEIGHT - 1 - 1)	; 9
    455  f164		       f2		      .byte.b	>(CheBackLeftStep - PF_HEIGHT - 1 - 1)	; 10
    456  f165
    457  f165
    458  f165				   ColourPtrLow
    459  f165		       59		      .byte.b	<(CheHorizontalClr0 - PF_HEIGHT - 1 - 1)
    460  f166		       72		      .byte.b	<(CheHorizontalClr1 - PF_HEIGHT - 1 - 1)
    461  f167		       8b		      .byte.b	<(CheHorizontalClr2 - PF_HEIGHT - 1 - 1)
    462  f168		       6c		      .byte.b	<(CheFrontLeftStandClr - PF_HEIGHT - 1 - 1)	; 3
    463  f169		       85		      .byte.b	<(CheFrontRightStepClr - PF_HEIGHT - 1 - 1)	; 4
    464  f16a		       9e		      .byte.b	<(CheFrontRightStandClr - PF_HEIGHT - 1 - 1)	; 5
    465  f16b		       b7		      .byte.b	<(CheFrontLeftStepClr - PF_HEIGHT - 1 - 1)	; 6
    466  f16c		       d0		      .byte.b	<(CheBackLeftStandClr - PF_HEIGHT - 1 - 1)	; 7
    467  f16d		       e9		      .byte.b	<(CheBackRightStepClr - PF_HEIGHT - 1 - 1)	; 8
    468  f16e		       02		      .byte.b	<(CheBackRightStandClr - PF_HEIGHT - 1 - 1)	; 9
    469  f16f		       1b		      .byte.b	<(CheBackLeftStepClr - PF_HEIGHT - 1 - 1)	; 10
    470  f170
    471  f170
    472  f170				   ColourPtrHi
    473  f170		       f1		      .byte.b	>(CheHorizontalClr0 - PF_HEIGHT - 1 - 1)
    474  f171		       f1		      .byte.b	>(CheHorizontalClr1 - PF_HEIGHT - 1 - 1)
    475  f172		       f1		      .byte.b	>(CheHorizontalClr2 - PF_HEIGHT - 1 - 1)
    476  f173		       f2		      .byte.b	>(CheFrontLeftStandClr - PF_HEIGHT - 1 - 1)	; 3
    477  f174		       f2		      .byte.b	>(CheFrontRightStepClr - PF_HEIGHT - 1 - 1)	; 4
    478  f175		       f2		      .byte.b	>(CheFrontRightStandClr - PF_HEIGHT - 1 - 1)	; 5
    479  f176		       f2		      .byte.b	>(CheFrontLeftStepClr - PF_HEIGHT - 1 - 1)	; 6
    480  f177		       f2		      .byte.b	>(CheBackLeftStandClr - PF_HEIGHT - 1 - 1)	; 7
    481  f178		       f2		      .byte.b	>(CheBackRightStepClr - PF_HEIGHT - 1 - 1)	; 8
    482  f179		       f3		      .byte.b	>(CheBackRightStandClr - PF_HEIGHT - 1 - 1)	; 9
    483  f17a		       f3		      .byte.b	>(CheBackLeftStepClr - PF_HEIGHT - 1 - 1)	; 10
    484  f17b
    485  f17b							;=================================
    486  f17b							; Kernel
    487  f17b							;
    488  f17b							; The flow of the kernel works like this:
    489  f17b							;
    490  f17b							; 1. Blank out the playfield
    491  f17b							;
    492  f17b							;=================================
    493  f17b
    494  f17b				   Kernel
    495  f17b		       85 02		      sta	WSYNC
    496  f17d							;---------------------------------
    497  f17d		       ad 84 02 	      lda	INTIM	; 4  4
    498  f180		       d0 f9		      bne	Kernel	; 2  6
    499  f182		       85 01		      sta	VBLANK	; 3  9 - Accumulator D1=0
    500  f184
    501  f184		       a9 00		      lda	#0	; 2  2
    502  f186		       85 0d		      sta	PF0	; 3  5
    503  f188		       85 0e		      sta	PF1	; 3  8
    504  f18a		       85 0f		      sta	PF2	; 3 11
    505  f18c
    506  f18c		       a9 d2		      lda	#$D2
    507  f18e		       85 09		      sta	COLUBK
    508  f190
    509  f190		       a0 c0		      ldy	#PF_HEIGHT	; 2 18
    510  f192
    511  f192		       a9 19		      lda	#P0_HEIGHT	; 2 20
    512  f194		       c7 92		      dcp	Player0Offset	; 5 25
    513  f196		       b0 03		      bcs	DoDrawGrp0pre	; 2 27 (3 28)
    514  f198		       a9 00		      lda	#0	; 2 29
    515  f19a		       2c		      .byte.b	$2C	; 4 33
    516  f19b
    517  f19b				   DoDrawGrp0pre		; 3 28
    518  f19b		       b1 82		      lda	(Player0Ptr),y	; 5 33
    519  f19d		       85 8d		      sta	Temp	; 3 36
    520  f19f		       b1 89		      lda	(Player0Clr),y	; 5 41
    521  f1a1
    522  f1a1		       88		      dey		; 2 43
    523  f1a2
    524  f1a2				   .KernelLoop
    525  f1a2
    526  f1a2		       85 02		      sta	WSYNC	; 3 46
    527  f1a4							;-----------------------------------------------------
    528  f1a4
    529  f1a4		       85 06		      sta	COLUP0	; 3  3
    530  f1a6		       a5 8d		      lda	Temp	; 3  6
    531  f1a8		       85 1b		      sta	GRP0	; 3  9
    532  f1aa
    533  f1aa		       a9 19		      lda	#P0_HEIGHT	; 2 11
    534  f1ac		       c7 92		      dcp	Player0Offset	; 5 16
    535  f1ae		       b0 03		      bcs	DoDrawGrp0	; 2 18 (3 19)
    536  f1b0		       a9 00		      lda	#0	; 2 20
    537  f1b2		       2c		      .byte.b	$2C	; 4 24
    538  f1b3
    539  f1b3				   DoDrawGrp0		; 3 19
    540  f1b3		       b1 82		      lda	(Player0Ptr),y	; 5 24
    541  f1b5		       85 8d		      sta	Temp	; 3 27
    542  f1b7		       b1 89		      lda	(Player0Clr),y	; 5 32
    543  f1b9
    544  f1b9		       88		      dey
    545  f1ba		       d0 e6		      bne	.KernelLoop
    546  f1bc
    547  f1bc		       60		      rts
    548  f1bd
    549  f1bd							;==========
    550  f1bd							; Overscan
    551  f1bd							;==========
    552  f1bd
    553  f1bd				   OverScan
    554  f1bd		       85 02		      sta	WSYNC
    555  f1bf		       a9 02		      lda	#2
    556  f1c1		       85 01		      sta	VBLANK
    557  f1c3		       a9 24		      lda	#36
    558  f1c5		       8d 96 02 	      sta	TIM64T
    559  f1c8		       85 02		      sta	WSYNC
    560  f1ca
    561  f1ca				   .Wait
    562  f1ca		       ad 84 02 	      lda	INTIM
    563  f1cd		       d0 fb		      bne	.Wait
    564  f1cf
    565  f1cf		       60		      rts
    566  f1d0
    567  f1d0
    568  f1d0
    569  f1d0							;=================================
    570  f1d0							;=================================
    571  f1d0							; GRAPHICS
    572  f1d0							;=================================
    573  f1d0							;=================================
    574  f1d0
    575  f1d0							;=================================
    576  f1d0							; GRAPHICS IMAGE DATA
    577  f1d0							;=================================
    578  f1d0
    579  f1d0							; HORIZONTAL IMAGES
    580  f1d0
    581  f1d0				   CheHorizontal0
    582  f1d0		       b4		      .byte.b	#%10110100	;$00
    583  f1d1		       03		      .byte.b	#%00000011	;$E0
    584  f1d2		       02		      .byte.b	#%00000010	;$E0
    585  f1d3		       82		      .byte.b	#%10000010	;$E0
    586  f1d4		       82		      .byte.b	#%10000010	;$E0
    587  f1d5		       f2		      .byte.b	#%11110010	;$E0
    588  f1d6		       36		      .byte.b	#%00110110	;$D4
    589  f1d7		       3e		      .byte.b	#%00111110	;$D4
    590  f1d8		       3e		      .byte.b	#%00111110	;$D4
    591  f1d9		       1c		      .byte.b	#%00011100	;$D4
    592  f1da		       1e		      .byte.b	#%00011110	;$D0
    593  f1db		       7f		      .byte.b	#%01111111	;$10
    594  f1dc		       fe		      .byte.b	#%11111110	;$10
    595  f1dd		       5c		      .byte.b	#%01011100	;$C4
    596  f1de		       7c		      .byte.b	#%01111100	;$D4
    597  f1df		       3c		      .byte.b	#%00111100	;$D4
    598  f1e0		       38		      .byte.b	#%00111000	;$D4
    599  f1e1		       3c		      .byte.b	#%00111100	;$00
    600  f1e2		       38		      .byte.b	#%00111000	;$00
    601  f1e3		       38		      .byte.b	#%00111000	;$FE
    602  f1e4		       3c		      .byte.b	#%00111100	;$00
    603  f1e5		       3c		      .byte.b	#%00111100	;$00
    604  f1e6		       1c		      .byte.b	#%00011100	;$00
    605  f1e7		       0c		      .byte.b	#%00001100	;$00
    606  f1e8		       00		      .byte.b	#%00000000	;$00
    607  f1e9
    608  f1e9				   CheHorizontal1
    609  f1e9		       ec		      .byte.b	#%11101100	;$00
    610  f1ea		       0c		      .byte.b	#%00001100	;$E0
    611  f1eb		       18		      .byte.b	#%00011000	;$E0
    612  f1ec		       18		      .byte.b	#%00011000	;$E0
    613  f1ed		       08		      .byte.b	#%00001000	;$E0
    614  f1ee		       0c		      .byte.b	#%00001100	;$E0
    615  f1ef		       0c		      .byte.b	#%00001100	;$D4
    616  f1f0		       1c		      .byte.b	#%00011100	;$D4
    617  f1f1		       1c		      .byte.b	#%00011100	;$D4
    618  f1f2		       1c		      .byte.b	#%00011100	;$D4
    619  f1f3		       1e		      .byte.b	#%00011110	;$D0
    620  f1f4		       7f		      .byte.b	#%01111111	;$10
    621  f1f5		       fe		      .byte.b	#%11111110	;$10
    622  f1f6		       5c		      .byte.b	#%01011100	;$C4
    623  f1f7		       7c		      .byte.b	#%01111100	;$D4
    624  f1f8		       3c		      .byte.b	#%00111100	;$D4
    625  f1f9		       38		      .byte.b	#%00111000	;$D4
    626  f1fa		       3c		      .byte.b	#%00111100	;$00
    627  f1fb		       38		      .byte.b	#%00111000	;$00
    628  f1fc		       38		      .byte.b	#%00111000	;$FE
    629  f1fd		       3c		      .byte.b	#%00111100	;$00
    630  f1fe		       3c		      .byte.b	#%00111100	;$00
    631  f1ff		       1c		      .byte.b	#%00011100	;$00
    632  f200		       0c		      .byte.b	#%00001100	;$00
    633  f201		       00		      .byte.b	#%00000000	;$00
    634  f202
    635  f202				   CheHorizontal2
    636  f202		       5d		      .byte.b	#%01011101	;$00
    637  f203		       20		      .byte.b	#%00100000	;$E0
    638  f204		       42		      .byte.b	#%01000010	;$E0
    639  f205		       43		      .byte.b	#%01000011	;$E0
    640  f206		       42		      .byte.b	#%01000010	;$E0
    641  f207		       62		      .byte.b	#%01100010	;$E0
    642  f208		       36		      .byte.b	#%00110110	;$D4
    643  f209		       3e		      .byte.b	#%00111110	;$D4
    644  f20a		       3e		      .byte.b	#%00111110	;$D4
    645  f20b		       1c		      .byte.b	#%00011100	;$D4
    646  f20c		       1e		      .byte.b	#%00011110	;$D0
    647  f20d		       7f		      .byte.b	#%01111111	;$10
    648  f20e		       fe		      .byte.b	#%11111110	;$10
    649  f20f		       5c		      .byte.b	#%01011100	;$C4
    650  f210		       7c		      .byte.b	#%01111100	;$D4
    651  f211		       3c		      .byte.b	#%00111100	;$D4
    652  f212		       38		      .byte.b	#%00111000	;$D4
    653  f213		       3c		      .byte.b	#%00111100	;$00
    654  f214		       38		      .byte.b	#%00111000	;$00
    655  f215		       38		      .byte.b	#%00111000	;$FE
    656  f216		       3c		      .byte.b	#%00111100	;$00
    657  f217		       3c		      .byte.b	#%00111100	;$00
    658  f218		       1c		      .byte.b	#%00011100	;$00
    659  f219		       0c		      .byte.b	#%00001100	;$00
    660  f21a		       00		      .byte.b	#%00000000	;$00
    661  f21b
    662  f21b				   CheHorizontalClr0
    663  f21b		       00		      .byte.b	#$00	;
    664  f21c		       e0		      .byte.b	#$E0	;
    665  f21d		       e0		      .byte.b	#$E0	;
    666  f21e		       e0		      .byte.b	#$E0	;
    667  f21f		       e0		      .byte.b	#$E0	;
    668  f220		       e0		      .byte.b	#$E0	;
    669  f221		       d4		      .byte.b	#$D4	;
    670  f222		       d4		      .byte.b	#$D4	;
    671  f223		       d4		      .byte.b	#$D4	;
    672  f224		       d4		      .byte.b	#$D4	;
    673  f225		       d0		      .byte.b	#$D0	;
    674  f226		       10		      .byte.b	#$10	;
    675  f227		       10		      .byte.b	#$10	;
    676  f228		       c4		      .byte.b	#$C4	;
    677  f229		       d4		      .byte.b	#$D4	;
    678  f22a		       d4		      .byte.b	#$D4	;
    679  f22b		       d4		      .byte.b	#$D4	;
    680  f22c		       00		      .byte.b	#$00	;
    681  f22d		       00		      .byte.b	#$00	;
    682  f22e		       fe		      .byte.b	#$FE	;
    683  f22f		       00		      .byte.b	#$00	;
    684  f230		       00		      .byte.b	#$00	;
    685  f231		       00		      .byte.b	#$00	;
    686  f232		       00		      .byte.b	#$00	;
    687  f233		       00		      .byte.b	#$00	;
    688  f234
    689  f234				   CheHorizontalClr1
    690  f234		       00		      .byte.b	#$00	;
    691  f235		       e0		      .byte.b	#$E0	;
    692  f236		       e0		      .byte.b	#$E0	;
    693  f237		       e0		      .byte.b	#$E0	;
    694  f238		       e0		      .byte.b	#$E0	;
    695  f239		       e0		      .byte.b	#$E0	;
    696  f23a		       d4		      .byte.b	#$D4	;
    697  f23b		       d4		      .byte.b	#$D4	;
    698  f23c		       d4		      .byte.b	#$D4	;
    699  f23d		       d4		      .byte.b	#$D4	;
    700  f23e		       d0		      .byte.b	#$D0	;
    701  f23f		       10		      .byte.b	#$10	;
    702  f240		       10		      .byte.b	#$10	;
    703  f241		       c4		      .byte.b	#$C4	;
    704  f242		       d4		      .byte.b	#$D4	;
    705  f243		       d4		      .byte.b	#$D4	;
    706  f244		       d4		      .byte.b	#$D4	;
    707  f245		       00		      .byte.b	#$00	;
    708  f246		       00		      .byte.b	#$00	;
    709  f247		       fe		      .byte.b	#$FE	;
    710  f248		       00		      .byte.b	#$00	;
    711  f249		       00		      .byte.b	#$00	;
    712  f24a		       00		      .byte.b	#$00	;
    713  f24b		       00		      .byte.b	#$00	;
    714  f24c		       00		      .byte.b	#$00	;
    715  f24d
    716  f24d				   CheHorizontalClr2
    717  f24d		       00		      .byte.b	#$00	;
    718  f24e		       e0		      .byte.b	#$E0	;
    719  f24f		       e0		      .byte.b	#$E0	;
    720  f250		       e0		      .byte.b	#$E0	;
    721  f251		       e0		      .byte.b	#$E0	;
    722  f252		       e0		      .byte.b	#$E0	;
    723  f253		       d4		      .byte.b	#$D4	;
    724  f254		       d4		      .byte.b	#$D4	;
    725  f255		       d4		      .byte.b	#$D4	;
    726  f256		       d4		      .byte.b	#$D4	;
    727  f257		       d0		      .byte.b	#$D0	;
    728  f258		       10		      .byte.b	#$10	;
    729  f259		       10		      .byte.b	#$10	;
    730  f25a		       c4		      .byte.b	#$C4	;
    731  f25b		       d4		      .byte.b	#$D4	;
    732  f25c		       d4		      .byte.b	#$D4	;
    733  f25d		       d4		      .byte.b	#$D4	;
    734  f25e		       00		      .byte.b	#$00	;
    735  f25f		       00		      .byte.b	#$00	;
    736  f260		       fe		      .byte.b	#$FE	;
    737  f261		       00		      .byte.b	#$00	;
    738  f262		       00		      .byte.b	#$00	;
    739  f263		       00		      .byte.b	#$00	;
    740  f264		       00		      .byte.b	#$00	;
    741  f265		       00		      .byte.b	#$00	;
    742  f266
    743  f266
    744  f266							; VERTICAL IMAGES
    745  f266
    746  f266				   CheFrontLeftStand
    747  f266		       6c		      .byte.b	#%01101100	;$D0
    748  f267		       28		      .byte.b	#%00101000	;$D0
    749  f268		       28		      .byte.b	#%00101000	;$D0
    750  f269		       6c		      .byte.b	#%01101100	;$D0
    751  f26a		       6c		      .byte.b	#%01101100	;$D4
    752  f26b		       6c		      .byte.b	#%01101100	;$D4
    753  f26c		       7c		      .byte.b	#%01111100	;$D4
    754  f26d		       7c		      .byte.b	#%01111100	;$D4
    755  f26e		       38		      .byte.b	#%00111000	;$D4
    756  f26f		       7c		      .byte.b	#%01111100	;$D0
    757  f270		       58		      .byte.b	#%01011000	;$D4
    758  f271		       ac		      .byte.b	#%10101100	;$D4
    759  f272		       ac		      .byte.b	#%10101100	;$D4
    760  f273		       dc		      .byte.b	#%11011100	;$D4
    761  f274		       fc		      .byte.b	#%11111100	;$D4
    762  f275		       fc		      .byte.b	#%11111100	;$D4
    763  f276		       78		      .byte.b	#%01111000	;$D4
    764  f277		       30		      .byte.b	#%00110000	;$00
    765  f278		       30		      .byte.b	#%00110000	;$FE
    766  f279		       30		      .byte.b	#%00110000	;$FE
    767  f27a		       78		      .byte.b	#%01111000	;$00
    768  f27b		       70		      .byte.b	#%01110000	;$00
    769  f27c		       60		      .byte.b	#%01100000	;$00
    770  f27d		       00		      .byte.b	#%00000000	;$00
    771  f27e		       00		      .byte.b	#%00000000	;$00
    772  f27f
    773  f27f				   CheFrontRightStep
    774  f27f		       0e		      .byte.b	#%00001110	;$E0
    775  f280		       3c		      .byte.b	#%00111100	;$E0
    776  f281		       60		      .byte.b	#%01100000	;$E0
    777  f282		       04		      .byte.b	#%00000100	;$D0
    778  f283		       06		      .byte.b	#%00000110	;$D0
    779  f284		       4e		      .byte.b	#%01001110	;$D0
    780  f285		       6c		      .byte.b	#%01101100	;$D4
    781  f286		       7c		      .byte.b	#%01111100	;$D4
    782  f287		       3c		      .byte.b	#%00111100	;$D4
    783  f288		       3c		      .byte.b	#%00111100	;$D4
    784  f289		       78		      .byte.b	#%01111000	;$D0
    785  f28a		       28		      .byte.b	#%00101000	;$D4
    786  f28b		       56		      .byte.b	#%01010110	;$D4
    787  f28c		       56		      .byte.b	#%01010110	;$D4
    788  f28d		       6e		      .byte.b	#%01101110	;$D4
    789  f28e		       7c		      .byte.b	#%01111100	;$D4
    790  f28f		       3c		      .byte.b	#%00111100	;$D4
    791  f290		       3c		      .byte.b	#%00111100	;$D4
    792  f291		       18		      .byte.b	#%00011000	;$00
    793  f292		       18		      .byte.b	#%00011000	;$FE
    794  f293		       18		      .byte.b	#%00011000	;$FE
    795  f294		       3c		      .byte.b	#%00111100	;$00
    796  f295		       1c		      .byte.b	#%00011100	;$00
    797  f296		       0c		      .byte.b	#%00001100	;$00
    798  f297		       00		      .byte.b	#%00000000	;$00
    799  f298
    800  f298				   CheFrontRightStand
    801  f298		       6c		      .byte.b	#%01101100	;$D0
    802  f299		       28		      .byte.b	#%00101000	;$D0
    803  f29a		       28		      .byte.b	#%00101000	;$D0
    804  f29b		       6c		      .byte.b	#%01101100	;$D0
    805  f29c		       6c		      .byte.b	#%01101100	;$D4
    806  f29d		       6c		      .byte.b	#%01101100	;$D4
    807  f29e		       7c		      .byte.b	#%01111100	;$D4
    808  f29f		       7c		      .byte.b	#%01111100	;$D4
    809  f2a0		       38		      .byte.b	#%00111000	;$D4
    810  f2a1		       7c		      .byte.b	#%01111100	;$D0
    811  f2a2		       58		      .byte.b	#%01011000	;$D4
    812  f2a3		       ac		      .byte.b	#%10101100	;$D4
    813  f2a4		       ac		      .byte.b	#%10101100	;$D4
    814  f2a5		       dc		      .byte.b	#%11011100	;$D4
    815  f2a6		       fc		      .byte.b	#%11111100	;$D4
    816  f2a7		       fc		      .byte.b	#%11111100	;$D4
    817  f2a8		       78		      .byte.b	#%01111000	;$D4
    818  f2a9		       30		      .byte.b	#%00110000	;$00
    819  f2aa		       30		      .byte.b	#%00110000	;$FE
    820  f2ab		       30		      .byte.b	#%00110000	;$FE
    821  f2ac		       78		      .byte.b	#%01111000	;$00
    822  f2ad		       38		      .byte.b	#%00111000	;$00
    823  f2ae		       18		      .byte.b	#%00011000	;$00
    824  f2af		       00		      .byte.b	#%00000000	;$00
    825  f2b0		       00		      .byte.b	#%00000000	;$00
    826  f2b1
    827  f2b1				   CheFrontLeftStep
    828  f2b1		       e0		      .byte.b	#%11100000	;$E0
    829  f2b2		       78		      .byte.b	#%01111000	;$E0
    830  f2b3		       0c		      .byte.b	#%00001100	;$E0
    831  f2b4		       40		      .byte.b	#%01000000	;$D0
    832  f2b5		       c0		      .byte.b	#%11000000	;$D0
    833  f2b6		       e4		      .byte.b	#%11100100	;$D0
    834  f2b7		       6c		      .byte.b	#%01101100	;$D4
    835  f2b8		       7c		      .byte.b	#%01111100	;$D4
    836  f2b9		       78		      .byte.b	#%01111000	;$D4
    837  f2ba		       78		      .byte.b	#%01111000	;$D4
    838  f2bb		       3c		      .byte.b	#%00111100	;$D0
    839  f2bc		       58		      .byte.b	#%01011000	;$D4
    840  f2bd		       ac		      .byte.b	#%10101100	;$D4
    841  f2be		       ae		      .byte.b	#%10101110	;$D4
    842  f2bf		       da		      .byte.b	#%11011010	;$D4
    843  f2c0		       fe		      .byte.b	#%11111110	;$D4
    844  f2c1		       7c		      .byte.b	#%01111100	;$D4
    845  f2c2		       7c		      .byte.b	#%01111100	;$D4
    846  f2c3		       30		      .byte.b	#%00110000	;$00
    847  f2c4		       30		      .byte.b	#%00110000	;$FE
    848  f2c5		       30		      .byte.b	#%00110000	;$FE
    849  f2c6		       78		      .byte.b	#%01111000	;$00
    850  f2c7		       70		      .byte.b	#%01110000	;$00
    851  f2c8		       60		      .byte.b	#%01100000	;$00
    852  f2c9		       00		      .byte.b	#%00000000	;$00
    853  f2ca
    854  f2ca				   CheBackLeftStand
    855  f2ca		       6c		      .byte.b	#%01101100	;$D0
    856  f2cb		       28		      .byte.b	#%00101000	;$D0
    857  f2cc		       28		      .byte.b	#%00101000	;$D0
    858  f2cd		       6c		      .byte.b	#%01101100	;$D0
    859  f2ce		       6c		      .byte.b	#%01101100	;$D4
    860  f2cf		       6c		      .byte.b	#%01101100	;$D4
    861  f2d0		       7c		      .byte.b	#%01111100	;$D4
    862  f2d1		       7c		      .byte.b	#%01111100	;$D4
    863  f2d2		       38		      .byte.b	#%00111000	;$D4
    864  f2d3		       7c		      .byte.b	#%01111100	;$D0
    865  f2d4		       3c		      .byte.b	#%00111100	;$D4
    866  f2d5		       76		      .byte.b	#%01110110	;$D4
    867  f2d6		       f2		      .byte.b	#%11110010	;$D4
    868  f2d7		       ea		      .byte.b	#%11101010	;$D4
    869  f2d8		       de		      .byte.b	#%11011110	;$D4
    870  f2d9		       fc		      .byte.b	#%11111100	;$D4
    871  f2da		       38		      .byte.b	#%00111000	;$D4
    872  f2db		       30		      .byte.b	#%00110000	;$FE
    873  f2dc		       30		      .byte.b	#%00110000	;$FE
    874  f2dd		       30		      .byte.b	#%00110000	;$FE
    875  f2de		       78		      .byte.b	#%01111000	;$00
    876  f2df		       70		      .byte.b	#%01110000	;$00
    877  f2e0		       60		      .byte.b	#%01100000	;$00
    878  f2e1		       00		      .byte.b	#%00000000	;--
    879  f2e2		       00		      .byte.b	#%00000000	;--
    880  f2e3
    881  f2e3				   CheBackRightStep
    882  f2e3		       60		      .byte.b	#%01100000	;$E0
    883  f2e4		       38		      .byte.b	#%00111000	;$E0
    884  f2e5		       0c		      .byte.b	#%00001100	;$E0
    885  f2e6		       0c		      .byte.b	#%00001100	;$E0
    886  f2e7		       40		      .byte.b	#%01000000	;$D0
    887  f2e8		       60		      .byte.b	#%01100000	;$D0
    888  f2e9		       64		      .byte.b	#%01100100	;$D0
    889  f2ea		       24		      .byte.b	#%00100100	;$D0
    890  f2eb		       34		      .byte.b	#%00110100	;$D4
    891  f2ec		       3c		      .byte.b	#%00111100	;$D4
    892  f2ed		       78		      .byte.b	#%01111000	;$D0
    893  f2ee		       3c		      .byte.b	#%00111100	;$D4
    894  f2ef		       76		      .byte.b	#%01110110	;$D4
    895  f2f0		       6a		      .byte.b	#%01101010	;$D4
    896  f2f1		       6e		      .byte.b	#%01101110	;$D4
    897  f2f2		       5c		      .byte.b	#%01011100	;$D4
    898  f2f3		       5c		      .byte.b	#%01011100	;$D4
    899  f2f4		       38		      .byte.b	#%00111000	;$D4
    900  f2f5		       18		      .byte.b	#%00011000	;$FE
    901  f2f6		       18		      .byte.b	#%00011000	;$FE
    902  f2f7		       18		      .byte.b	#%00011000	;$FE
    903  f2f8		       3c		      .byte.b	#%00111100	;$00
    904  f2f9		       1c		      .byte.b	#%00011100	;$00
    905  f2fa		       0c		      .byte.b	#%00001100	;$00
    906  f2fb		       00		      .byte.b	#%00000000	;$00
    907  f2fc
    908  f2fc				   CheBackRightStand
    909  f2fc		       6c		      .byte.b	#%01101100	;$D0
    910  f2fd		       28		      .byte.b	#%00101000	;$D0
    911  f2fe		       28		      .byte.b	#%00101000	;$D0
    912  f2ff		       6c		      .byte.b	#%01101100	;$D0
    913  f300		       6c		      .byte.b	#%01101100	;$D4
    914  f301		       6c		      .byte.b	#%01101100	;$D4
    915  f302		       7c		      .byte.b	#%01111100	;$D4
    916  f303		       7c		      .byte.b	#%01111100	;$D4
    917  f304		       38		      .byte.b	#%00111000	;$D4
    918  f305		       7c		      .byte.b	#%01111100	;$D0
    919  f306		       3c		      .byte.b	#%00111100	;$D4
    920  f307		       76		      .byte.b	#%01110110	;$D4
    921  f308		       f2		      .byte.b	#%11110010	;$D4
    922  f309		       ea		      .byte.b	#%11101010	;$D4
    923  f30a		       de		      .byte.b	#%11011110	;$D4
    924  f30b		       fc		      .byte.b	#%11111100	;$D4
    925  f30c		       38		      .byte.b	#%00111000	;$D4
    926  f30d		       30		      .byte.b	#%00110000	;$FE
    927  f30e		       30		      .byte.b	#%00110000	;$FE
    928  f30f		       30		      .byte.b	#%00110000	;$FE
    929  f310		       78		      .byte.b	#%01111000	;$00
    930  f311		       38		      .byte.b	#%00111000	;$00
    931  f312		       18		      .byte.b	#%00011000	;$00
    932  f313		       00		      .byte.b	#%00000000	;--
    933  f314		       00		      .byte.b	#%00000000	;--
    934  f315
    935  f315				   CheBackLeftStep
    936  f315		       0c		      .byte.b	#%00001100	;$E0
    937  f316		       38		      .byte.b	#%00111000	;$E0
    938  f317		       60		      .byte.b	#%01100000	;$E0
    939  f318		       60		      .byte.b	#%01100000	;$E0
    940  f319		       04		      .byte.b	#%00000100	;$D0
    941  f31a		       0c		      .byte.b	#%00001100	;$D0
    942  f31b		       4c		      .byte.b	#%01001100	;$D0
    943  f31c		       48		      .byte.b	#%01001000	;$D0
    944  f31d		       58		      .byte.b	#%01011000	;$D4
    945  f31e		       78		      .byte.b	#%01111000	;$D4
    946  f31f		       3c		      .byte.b	#%00111100	;$D0
    947  f320		       78		      .byte.b	#%01111000	;$D4
    948  f321		       fc		      .byte.b	#%11111100	;$D4
    949  f322		       b6		      .byte.b	#%10110110	;$D4
    950  f323		       ea		      .byte.b	#%11101010	;$D4
    951  f324		       de		      .byte.b	#%11011110	;$D4
    952  f325		       be		      .byte.b	#%10111110	;$D4
    953  f326		       7c		      .byte.b	#%01111100	;$D4
    954  f327		       30		      .byte.b	#%00110000	;$FE
    955  f328		       30		      .byte.b	#%00110000	;$FE
    956  f329		       30		      .byte.b	#%00110000	;$FE
    957  f32a		       78		      .byte.b	#%01111000	;$00
    958  f32b		       70		      .byte.b	#%01110000	;$00
    959  f32c		       60		      .byte.b	#%01100000	;$00
    960  f32d		       00		      .byte.b	#%00000000	;$00
    961  f32e
    962  f32e				   CheFrontLeftStandClr
    963  f32e		       d0		      .byte.b	#$D0	;
    964  f32f		       d0		      .byte.b	#$D0	;
    965  f330		       d0		      .byte.b	#$D0	;
    966  f331		       d0		      .byte.b	#$D0	;
    967  f332		       d4		      .byte.b	#$D4	;
    968  f333		       d4		      .byte.b	#$D4	;
    969  f334		       d4		      .byte.b	#$D4	;
    970  f335		       d4		      .byte.b	#$D4	;
    971  f336		       d4		      .byte.b	#$D4	;
    972  f337		       d0		      .byte.b	#$D0	;
    973  f338		       d4		      .byte.b	#$D4	;
    974  f339		       d4		      .byte.b	#$D4	;
    975  f33a		       d4		      .byte.b	#$D4	;
    976  f33b		       d4		      .byte.b	#$D4	;
    977  f33c		       d4		      .byte.b	#$D4	;
    978  f33d		       d4		      .byte.b	#$D4	;
    979  f33e		       d4		      .byte.b	#$D4	;
    980  f33f		       00		      .byte.b	#$00	;
    981  f340		       fe		      .byte.b	#$FE	;
    982  f341		       fe		      .byte.b	#$FE	;
    983  f342		       00		      .byte.b	#$00	;
    984  f343		       00		      .byte.b	#$00	;
    985  f344		       00		      .byte.b	#$00	;
    986  f345		       00		      .byte.b	#$00	;
    987  f346		       00		      .byte.b	#$00	;
    988  f347
    989  f347				   CheFrontRightStepClr
    990  f347		       e0		      .byte.b	#$E0	;
    991  f348		       e0		      .byte.b	#$E0	;
    992  f349		       e0		      .byte.b	#$E0	;
    993  f34a		       d0		      .byte.b	#$D0	;
    994  f34b		       d0		      .byte.b	#$D0	;
    995  f34c		       d0		      .byte.b	#$D0	;
    996  f34d		       d4		      .byte.b	#$D4	;
    997  f34e		       d4		      .byte.b	#$D4	;
    998  f34f		       d4		      .byte.b	#$D4	;
    999  f350		       d4		      .byte.b	#$D4	;
   1000  f351		       d0		      .byte.b	#$D0	;
   1001  f352		       d4		      .byte.b	#$D4	;
   1002  f353		       d4		      .byte.b	#$D4	;
   1003  f354		       d4		      .byte.b	#$D4	;
   1004  f355		       d4		      .byte.b	#$D4	;
   1005  f356		       d4		      .byte.b	#$D4	;
   1006  f357		       d4		      .byte.b	#$D4	;
   1007  f358		       d4		      .byte.b	#$D4	;
   1008  f359		       00		      .byte.b	#$00	;
   1009  f35a		       fe		      .byte.b	#$FE	;
   1010  f35b		       fe		      .byte.b	#$FE	;
   1011  f35c		       00		      .byte.b	#$00	;
   1012  f35d		       00		      .byte.b	#$00	;
   1013  f35e		       00		      .byte.b	#$00	;
   1014  f35f		       00		      .byte.b	#$00	;
   1015  f360
   1016  f360				   CheFrontRightStandClr
   1017  f360		       d0		      .byte.b	#$D0	;
   1018  f361		       d0		      .byte.b	#$D0	;
   1019  f362		       d0		      .byte.b	#$D0	;
   1020  f363		       d0		      .byte.b	#$D0	;
   1021  f364		       d4		      .byte.b	#$D4	;
   1022  f365		       d4		      .byte.b	#$D4	;
   1023  f366		       d4		      .byte.b	#$D4	;
   1024  f367		       d4		      .byte.b	#$D4	;
   1025  f368		       d4		      .byte.b	#$D4	;
   1026  f369		       d0		      .byte.b	#$D0	;
   1027  f36a		       d4		      .byte.b	#$D4	;
   1028  f36b		       d4		      .byte.b	#$D4	;
   1029  f36c		       d4		      .byte.b	#$D4	;
   1030  f36d		       d4		      .byte.b	#$D4	;
   1031  f36e		       d4		      .byte.b	#$D4	;
   1032  f36f		       d4		      .byte.b	#$D4	;
   1033  f370		       d4		      .byte.b	#$D4	;
   1034  f371		       00		      .byte.b	#$00	;
   1035  f372		       fe		      .byte.b	#$FE	;
   1036  f373		       fe		      .byte.b	#$FE	;
   1037  f374		       00		      .byte.b	#$00	;
   1038  f375		       00		      .byte.b	#$00	;
   1039  f376		       00		      .byte.b	#$00	;
   1040  f377		       00		      .byte.b	#$00	;
   1041  f378		       00		      .byte.b	#$00	;
   1042  f379
   1043  f379				   CheFrontLeftStepClr
   1044  f379		       e0		      .byte.b	#$E0	;
   1045  f37a		       e0		      .byte.b	#$E0	;
   1046  f37b		       e0		      .byte.b	#$E0	;
   1047  f37c		       d0		      .byte.b	#$D0	;
   1048  f37d		       d0		      .byte.b	#$D0	;
   1049  f37e		       d0		      .byte.b	#$D0	;
   1050  f37f		       d4		      .byte.b	#$D4	;
   1051  f380		       d4		      .byte.b	#$D4	;
   1052  f381		       d4		      .byte.b	#$D4	;
   1053  f382		       d4		      .byte.b	#$D4	;
   1054  f383		       d0		      .byte.b	#$D0	;
   1055  f384		       d4		      .byte.b	#$D4	;
   1056  f385		       d4		      .byte.b	#$D4	;
   1057  f386		       d4		      .byte.b	#$D4	;
   1058  f387		       d4		      .byte.b	#$D4	;
   1059  f388		       d4		      .byte.b	#$D4	;
   1060  f389		       d4		      .byte.b	#$D4	;
   1061  f38a		       d4		      .byte.b	#$D4	;
   1062  f38b		       00		      .byte.b	#$00	;
   1063  f38c		       fe		      .byte.b	#$FE	;
   1064  f38d		       fe		      .byte.b	#$FE	;
   1065  f38e		       00		      .byte.b	#$00	;
   1066  f38f		       00		      .byte.b	#$00	;
   1067  f390		       00		      .byte.b	#$00	;
   1068  f391		       00		      .byte.b	#$00	;
   1069  f392
   1070  f392				   CheBackLeftStandClr
   1071  f392		       d0		      .byte.b	#$D0	;
   1072  f393		       d0		      .byte.b	#$D0	;
   1073  f394		       d0		      .byte.b	#$D0	;
   1074  f395		       d0		      .byte.b	#$D0	;
   1075  f396		       d4		      .byte.b	#$D4	;
   1076  f397		       d4		      .byte.b	#$D4	;
   1077  f398		       d4		      .byte.b	#$D4	;
   1078  f399		       d4		      .byte.b	#$D4	;
   1079  f39a		       d4		      .byte.b	#$D4	;
   1080  f39b		       d0		      .byte.b	#$D0	;
   1081  f39c		       d4		      .byte.b	#$D4	;
   1082  f39d		       d4		      .byte.b	#$D4	;
   1083  f39e		       d4		      .byte.b	#$D4	;
   1084  f39f		       d4		      .byte.b	#$D4	;
   1085  f3a0		       d4		      .byte.b	#$D4	;
   1086  f3a1		       d4		      .byte.b	#$D4	;
   1087  f3a2		       d4		      .byte.b	#$D4	;
   1088  f3a3		       fe		      .byte.b	#$FE	;
   1089  f3a4		       fe		      .byte.b	#$FE	;
   1090  f3a5		       fe		      .byte.b	#$FE	;
   1091  f3a6		       00		      .byte.b	#$00	;
   1092  f3a7		       00		      .byte.b	#$00	;
   1093  f3a8		       00		      .byte.b	#$00	;
   1094  f3a9		       0e		      .byte.b	#$0E	;
   1095  f3aa		       0e		      .byte.b	#$0E	;
   1096  f3ab
   1097  f3ab				   CheBackRightStepClr
   1098  f3ab		       e0		      .byte.b	#$E0	;
   1099  f3ac		       e0		      .byte.b	#$E0	;
   1100  f3ad		       e0		      .byte.b	#$E0	;
   1101  f3ae		       e0		      .byte.b	#$E0	;
   1102  f3af		       d0		      .byte.b	#$D0	;
   1103  f3b0		       d0		      .byte.b	#$D0	;
   1104  f3b1		       d0		      .byte.b	#$D0	;
   1105  f3b2		       d0		      .byte.b	#$D0	;
   1106  f3b3		       d4		      .byte.b	#$D4	;
   1107  f3b4		       d4		      .byte.b	#$D4	;
   1108  f3b5		       d0		      .byte.b	#$D0	;
   1109  f3b6		       d4		      .byte.b	#$D4	;
   1110  f3b7		       d4		      .byte.b	#$D4	;
   1111  f3b8		       d4		      .byte.b	#$D4	;
   1112  f3b9		       d4		      .byte.b	#$D4	;
   1113  f3ba		       d4		      .byte.b	#$D4	;
   1114  f3bb		       d4		      .byte.b	#$D4	;
   1115  f3bc		       d4		      .byte.b	#$D4	;
   1116  f3bd		       fe		      .byte.b	#$FE	;
   1117  f3be		       fe		      .byte.b	#$FE	;
   1118  f3bf		       fe		      .byte.b	#$FE	;
   1119  f3c0		       00		      .byte.b	#$00	;
   1120  f3c1		       00		      .byte.b	#$00	;
   1121  f3c2		       00		      .byte.b	#$00	;
   1122  f3c3		       00		      .byte.b	#$00	;
   1123  f3c4
   1124  f3c4				   CheBackRightStandClr
   1125  f3c4		       d0		      .byte.b	#$D0	;
   1126  f3c5		       d0		      .byte.b	#$D0	;
   1127  f3c6		       d0		      .byte.b	#$D0	;
   1128  f3c7		       d0		      .byte.b	#$D0	;
   1129  f3c8		       d4		      .byte.b	#$D4	;
   1130  f3c9		       d4		      .byte.b	#$D4	;
   1131  f3ca		       d4		      .byte.b	#$D4	;
   1132  f3cb		       d4		      .byte.b	#$D4	;
   1133  f3cc		       d4		      .byte.b	#$D4	;
   1134  f3cd		       d0		      .byte.b	#$D0	;
   1135  f3ce		       d4		      .byte.b	#$D4	;
   1136  f3cf		       d4		      .byte.b	#$D4	;
   1137  f3d0		       d4		      .byte.b	#$D4	;
   1138  f3d1		       d4		      .byte.b	#$D4	;
   1139  f3d2		       d4		      .byte.b	#$D4	;
   1140  f3d3		       d4		      .byte.b	#$D4	;
   1141  f3d4		       d4		      .byte.b	#$D4	;
   1142  f3d5		       fe		      .byte.b	#$FE	;
   1143  f3d6		       fe		      .byte.b	#$FE	;
   1144  f3d7		       fe		      .byte.b	#$FE	;
   1145  f3d8		       00		      .byte.b	#$00	;
   1146  f3d9		       00		      .byte.b	#$00	;
   1147  f3da		       00		      .byte.b	#$00	;
   1148  f3db		       0e		      .byte.b	#$0E	;
   1149  f3dc		       0e		      .byte.b	#$0E	;
   1150  f3dd
   1151  f3dd				   CheBackLeftStepClr
   1152  f3dd		       e0		      .byte.b	#$E0	;
   1153  f3de		       e0		      .byte.b	#$E0	;
   1154  f3df		       e0		      .byte.b	#$E0	;
   1155  f3e0		       e0		      .byte.b	#$E0	;
   1156  f3e1		       d0		      .byte.b	#$D0	;
   1157  f3e2		       d0		      .byte.b	#$D0	;
   1158  f3e3		       d0		      .byte.b	#$D0	;
   1159  f3e4		       d0		      .byte.b	#$D0	;
   1160  f3e5		       d4		      .byte.b	#$D4	;
   1161  f3e6		       d4		      .byte.b	#$D4	;
   1162  f3e7		       d0		      .byte.b	#$D0	;
   1163  f3e8		       d4		      .byte.b	#$D4	;
   1164  f3e9		       d4		      .byte.b	#$D4	;
   1165  f3ea		       d4		      .byte.b	#$D4	;
   1166  f3eb		       d4		      .byte.b	#$D4	;
   1167  f3ec		       d4		      .byte.b	#$D4	;
   1168  f3ed		       d4		      .byte.b	#$D4	;
   1169  f3ee		       d4		      .byte.b	#$D4	;
   1170  f3ef		       fe		      .byte.b	#$FE	;
   1171  f3f0		       fe		      .byte.b	#$FE	;
   1172  f3f1		       fe		      .byte.b	#$FE	;
   1173  f3f2		       00		      .byte.b	#$00	;
   1174  f3f3		       00		      .byte.b	#$00	;
   1175  f3f4		       00		      .byte.b	#$00	;
   1176  f3f5		       00		      .byte.b	#$00	;
   1177  f3f6
   1178  f3f6							;=================================
   1179  f3f6							; free space check before End of Cartridge
   1180  f3f6							;=================================
 ------ 3076 bytes free before End of Cartridge
   1181  f3f6					      echo	"------", [$FFFA - *]d, "bytes free before End of Cartridge"
   1182  f3f6
   1183  f3f6							;=================================
   1184  f3f6							; Define End of Cartridge
   1185  f3f6							;=================================
   1186  fffa					      ORG	$FFFA	; set address to 6507 Interrupt Vectors
   1187  fffa							;.WORD InitSystem ; NMI
   1188  fffa							;.WORD InitSystem ; RESET
   1189  fffa							;.WORD InitSystem ; IRQ
   1190  fffa		       13 f0		      .byte.b	<InitSystem, >InitSystem
   1191  fffc		       13 f0		      .byte.b	<InitSystem, >InitSystem
   1192  fffe		       13 f0		      .byte.b	<InitSystem, >InitSystem
